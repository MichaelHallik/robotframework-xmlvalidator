"""
This module file holds merely one function that is being utilized in 
some of the integration tests that are run against the XmlValidator 
library.
"""


import csv
import os


def validate_csv_output(
        csv_path: str,
        expected_errors: list[dict]
        ):
    """
    Validates the contents of a CSV file containing XML validation 
    errors.

    :param csv_path:
    
        Path to the CSV file generated by the XML validation process.
    
    :param expected_errors:
    
        A list of dictionaries where each dictionary represents an 
        expected row. The keys in the dictionary correspond to column 
        headers in the CSV.

    :return:
    
        (bool, list) A boolean indicating if the CSV matches 
        expectations, and a list of mismatches if any.
    """
    # Sanity check the path.
    if not os.path.exists(csv_path):
        return False, [f"CSV file {csv_path} not found."]
    mismatches = []
    # Read the CSV data (containing the actual errors).
    with open(csv_path, newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        actual_errors = [row for row in reader] # pylint: disable=R1721:unnecessary-comprehension
    # Validate the number of errors is as expected.
    if len(actual_errors) != len(expected_errors):
        mismatches.append(
            f"Nr of errors: expected {len(expected_errors)}, got {len(actual_errors)}"
            )
    # Iterate over the list with expected errors (each error is a dict).
    for expected_error in expected_errors:
        # Flag to indicate a full match.
        match_found = False
        # Iterate over the actual errors
        for actual_error in actual_errors:
            # Ensure all expected columns are present and values match.
            if all(
                actual_error.get(column, "").strip() == str(value).strip()
                for column, value in expected_error.items()
                ):
                match_found = True
                break
        # Handle mismatch.
        if not match_found:
            mismatches.append(
                f"Expected error not found in CSV: {expected_error}."
                )
    return len(mismatches) == 0, mismatches
